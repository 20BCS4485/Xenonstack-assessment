#!/bin/bash

# internsctl - Custom Linux Command

# Command version
VERSION="v0.1.0"

# Function to display manual page
display_manual() {
    cat <<EOM
internsctl(1)                  User Manuals                  internsctl(1)

NAME
       internsctl - Custom Linux Command

SYNOPSIS
       internsctl [OPTIONS] COMMAND [ARGS]...

DESCRIPTION
       internsctl is a custom Linux command for various operations.

OPTIONS
       --help, -h
              Display help message.

       --version, -v
              Display command version.

COMMANDS
       cpu getinfo
              Get CPU information.

       memory getinfo
              Get memory information.

       user create <username>
              Create a new user.

       user list [--sudo-only]
              List all regular users or users with sudo permissions.

       file getinfo [options] <file-name>
              Get information about a file.

OPTIONS for file getinfo
       --size, -s
              Print file size.

       --permissions, -p
              Print file permissions.

       --owner, -o
              Print file owner.

       --last-modified, -m
              Print last modified time.

EXAMPLES
       internsctl cpu getinfo
       internsctl memory getinfo
       internsctl user create john_doe
       internsctl user list
       internsctl user list --sudo-only
       internsctl file getinfo hello.txt
       internsctl file getinfo --size hello.txt
       internsctl file getinfo --permissions hello.txt
       internsctl file getinfo --owner hello.txt
       internsctl file getinfo --last-modified hello.txt

EOM
}

# Function to display command version
display_version() {
    echo "internsctl $VERSION"
}

# Function to get CPU information
get_cpu_info() {
    lscpu
}

# Function to get memory information
get_memory_info() {
    free
}

# Function to create a new user
create_user() {
    username="$1"
    useradd -m "$username"
    echo "User $username created successfully."
}

# Function to list users
list_users() {
    if [ "$1" == "--sudo-only" ]; then
        getent passwd | cut -d: -f1,3,7 | grep ':/bin/bash' | awk '{ print $1 }'
    else
        getent passwd | cut -d: -f1
    fi
}

# Function to get file information
get_file_info() {
    file_name="$1"
    size_option=false
    permissions_option=false
    owner_option=false
    last_modified_option=false

    while [ "$#" -gt 1 ]; do
        case $1 in
            --size | -s)
                size_option=true
                ;;
            --permissions | -p)
                permissions_option=true
                ;;
            --owner | -o)
                owner_option=true
                ;;
            --last-modified | -m)
                last_modified_option=true
                ;;
            *)
                echo "Invalid option: $1"
                exit 1
                ;;
        esac
        shift
    done

    file_info=$(stat --format="File: %n\nAccess: %A\nSize(B): %s\nOwner: %U\nModify: %y" "$file_name")

    if [ "$size_option" == true ]; then
        echo "$(echo "$file_info" | grep "Size(B):" | awk '{ print $2 }')"
    elif [ "$permissions_option" == true ]; then
        echo "$(echo "$file_info" | grep "Access:" | awk '{ print $2 }')"
    elif [ "$owner_option" == true ]; then
        echo "$(echo "$file_info" | grep "Owner:" | awk '{ print $2 }')"
    elif [ "$last_modified_option" == true ]; then
        echo "$(echo "$file_info" | grep "Modify:" | awk '{ print $2, $3 }')"
    else
        echo "$file_info"
    fi
}

# Main script

# Check if no arguments provided
if [ "$#" -eq 0 ]; then
    echo "Error: No command provided. Use --help for usage information."
    exit 1
fi

# Parse command-line options
case $1 in
    --help | -h)
        display_manual
        ;;
    --version | -v)
        display_version
        ;;
    cpu)
        case $2 in
            getinfo)
                get_cpu_info
                ;;
            *)
                echo "Error: Invalid cpu command. Use --help for usage information."
                exit 1
                ;;
        esac
        ;;
    memory)
        case $2 in
            getinfo)
                get_memory_info
                ;;
            *)
                echo "Error: Invalid memory command. Use --help for usage information."
                exit 1
                ;;
        esac
        ;;
    user)
        case $2 in
            create)
                create_user "$3"
                ;;
            list)
                list_users "$3"
                ;;
            *)
                echo "Error: Invalid user command. Use --help for usage information."
                exit 1
                ;;
        esac
        ;;
    file)
        case $2 in
            getinfo)
                shift 2
                get_file_info "$@"
                ;;
            *)
                echo "Error: Invalid file command. Use --help for usage information."
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Error: Unknown command. Use --help for usage information."
        exit 1
        ;;
esac

exit 0
